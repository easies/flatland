=================
Code Organization
=================

Processing.js
-------------

.. _Processing.js: http://processingjs.org/

`Processing.js`_ is the underlying graphics platform that runs *Flatland
Primer*. It is a port of the Java based domain specific language
*Processing*.  *Processing.js* exploits the fact that Processing
has a Java-like syntax. So, it transforms the source code using regular
expression into Javascript code (which is eval'd).

Because the transformation from *Processing* to Javascript is not done
through an abstact syntax tree, using (and interacting with) native
Javascript code is possible.

Conversely, you can call "*Processing.js*" code from Javascript. For each
canvas element, Processing binds an instance to it, so you can get a
reference to it.

Map Generation
--------------

The map is an image.

Collision Detection
~~~~~~~~~~~~~~~~~~~

The collision detection within a map is pre-computed. A black pixel
(rgb(0, 0, 0)) denotes a wall (or an impassble terrain).

The map image is processed with `preprocess/map.py` using Python (and
the Python Imaging Library). It scans the image and generates Javascript,
specifically, a giant switch statement with returns true if the given
coordinate has a black pixel underneath.

This process is reused to generate another predicate for the end-of-level
marker.

These predicates, in turn, are wrapped inside a Javascript object. This
Javascript object can be accessed within the *Processing.js* code (see
previous code).

Organization
------------

Each logical view is a "World" (to borrow from fundies). A World is a
container for drawable objects. There is a global variable *world* which
is used by the global `draw <http://processingjs.org/reference/draw_>`_
function.

The current "view" is replaced by setting the global variable *world*
to a different world.

Make'ing the source
~~~~~~~~~~~~~~~~~~~

Each major piece of code is put into a *pjs* file.

The "build" process is as such:

    #. ``cat`` all pjs files
    #. pipe it into ``cpp -P`` and output it to ``flatland.pjs``
    #. Generate the preload.pjs
    #. Generate the map*.js files.
    #. Generate the index.html.

The source files are piped through cpp primarily to strip the comments
to improve load time. A cpp macro is used in one place (``main.pjs``)
to set the global debug to true or false by default.

preload.pjs
^^^^^^^^^^^

``preload.pjs`` is generated by
``flatland/preprocessor/generate_preload.sh`` which creates the `preload
<http://processingjs.org/reference/pjs%20directive>`_ directives. It is
used to reduce the load time on images (e.g. the maps).
