/* vim: set ft=processing : */

/*
 * Conway's Game of Life
 * 1. Live cells with two or three neighbors survive.
 * 2. The other live cells die (x < 2 or x >= 4 neighbors).
 * 3. Empty cells with three neighbors gets "birthed".
 * Referenced: http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life
 */
class GameOfLife implements Drawable {
    float x, y;
    /* width height */
    float w, h;
    int[] cells;
    ArrayList livecells;
    int size;
    int tick;
	color _color;

    GameOfLife(x, y, w, h, _color) {
        this.x = x, this.y = y;
        this.w = w, this.h = h;
        cells = new int[w * h];
        livecells = new ArrayList();
        size = 20;
        tick = second();
		this._color = _color;
    }

    /**
     * @param points An array of pairs of points.
     */
    void add_all(int[] points) {
        for (int i = 0, len = points.length; i < len; i += 2) {
            add(points[i], points[i + 1]);
        }
    }

    /**
     * @param index
     * @returns true if the cell at the index is alive.
     */
    void contains(int index) {
        return cells[index] == 1;
    }

    /**
     * @param x The x coordinate of the live cell.
     * @param y The y coordinate of the live cell.
     */
    void add(int x, int y) {
        add_index(x * w + y);
    }

    int contains_point(float px, float py) {
        float dx = px - x;
        float dy = py - y;
        if (dx < 0 || dy < 0) {
            return -1;
        }
        cx = floor(dx / size);
        cy = floor(dy / size);
        index = cx * w + cy;
        if (is_valid(cx, cy) && contains(index)) {
            return index;
        }
        return -1;
    }

    /**
     * @param n The index of the live cell to add.
     */
    void add_index(int n) {
        if (!cells[n]) {
            cells[n] = 1;
            livecells.add(n);
        }
    }

    boolean is_valid_index(int index) {
        return 0 <= index && index < cells.length;
    }

    Boolean is_valid(int x, int y) {
        return 0 <= x && x < w && 0 <= y && y < h;
    }

    /**
     * @param n The index.
     * @returns The array of neighbor's indices.
     */
    int[] neighbors(int n) {
        return new int[] {
            n - w - 1, n - w, n - w + 1,
            n - 1,                n + 1,
            n + w - 1, n + w, n + w + 1
        };
    }

    int count_neighbors(int n) {
        int[] nbs = neighbors(n);
        int count = 0;
        for (int i = 0, len = nbs.length; i < len; i++) {
            int nb = nbs[i];
            if (is_valid_index(nb) && contains(nb)) {
                count++;
            }
        }
        return count;
    }

    /**
     * @returns The next iteration of this game of life.
     */
    GameOfLife next() {
        GameOfLife next_gol = new GameOfLife(x, y, w, h, _color);
        ArrayList empties = new ArrayList(livecells.size() * 8);
        for (int i = 0, len = livecells.size(); i < len; i++) {
            lc = livecells.get(i);
            int[] nbs = neighbors(lc);
            int count = 0;
            // Iterate through the neighbors.
            for (int j = 0, nlen = nbs.length; j < nlen; j++) {
                n = nbs[j];
                if (is_valid_index(n)) {
                    // If the neighbor is a valid cell (i.e. within bounds)
                    // then it is a candidate to be checked for a spawn.
                    empties.add(n);
                    if (contains(n)) {
                        // This neighbor is alive.
                        count++;
                    }
                }
            }
            // Live cells with 2 or 3 neighbors live.
            if (count == 2 || count == 3) {
                next_gol.add_index(lc);
            }
        }
        // Handle new offsprings.
        for (int i = 0, len = empties.size(); i < len; i++) {
            e = empties.get(i);
            // If there are 3 neighbors, the empty cell comes to life.
            if (count_neighbors(e) == 3) {
                next_gol.add_index(e);
            }
        }
        return next_gol;
    }

    /**
     * The "side-effect" version of next.
     */
    void _next() {
        int s = second();
        if (s == tick) {
            return;
        }
        tick = s;
        // Get the next iteration.
        next_gol = next();
        // Copy the data over.
        cells = next_gol.cells;
        livecells = next_gol.livecells;
    }

    void draw_at(x, y) {
        pushMatrix();
        translate(x, y);
        stroke(_color);
        fill(_color);
        for (int i = 0, len = livecells.size(); i < len; i++) {
            lc = livecells.get(i);
            lcx = floor(lc / w);
            lcy = lc % w;
            rect(lcx * size, lcy * size, size, size);
        }
        popMatrix();
    }

    void draw() {
        _next();
        draw_at(x, y);
    }
}

class GameOfLifeInMap extends GameOfLife {
    Map map;

    GameOfLifeInMap(map, x, y, w, h, _color) {
        super(x, y, w, h, _color);
        this.map = map;
    }

    void draw() {
        _next();
        loc = map.screen_location(new PVector(x, y));
        draw_at(loc.x, loc.y);
    }
}
