/* vim: set ft=processing :
 * Syntax file is at http://web.ift.uib.no/~szhorvat/processing.vim
 *                or http://www.vim.org/scripts/script.php?script_id=2115
 */

Array g_vertices(x, y, n, side, rotation) {
    // The angle between sides.
    angle1 = PI * (n - 2) / n;
    // Law of sines.
    // The distance from the center to a vertex.
    center_to_vertex = sin(angle1 / 2) / sin(PI - angle1) * side;
    // The starting angle.
    start_angle = angle1 / 2 + rotation;
   // PI * (n - 2) / n + rotation;
    points = new float[n * 2];
    points[0] = x - center_to_vertex * cos(start_angle);
    points[1] = y + center_to_vertex * sin(start_angle);
    // The inner angle
    C = TWO_PI / n;
    for (int i = 1; i < n; i++) {
        x_index = 2 * i;
        y_index = x_index + 1;
        points[x_index] = points[x_index - 2] - side * cos(i * C + rotation);
        points[y_index] = points[y_index - 2] - side * sin(i * C + rotation);
    }
    return points;
}


class Penta {
    float x;
    float y;
    float speed_x;
    float speed_y;
    float next_x, next_y;
    float control_x, control_y;
    float control1_x, control1_y;
    float control2_x, control2_y;
    float side;
    float rotation;
    boolean pressed;
    float[] next_points;
    int n_current;

    Penta(float x, float y) {
        pressed = false;
        rotation = 0.0;
        next_points = new float[0];
        n_current = 0;
        this.x = x, this.y = y;
        speed_x = 0, speed_y = 0;
        control_x = 0, control_y = 0;
        next_x = 0, next_y = 0;
        side = 50;
    }

    void set_points() {
        next_points = g_bezier_to_points(x, y, control1_x, control1_y,
            control2_x, control2_y, next_x, next_y, 150);
        n_current = 0;
    }

    void move() {
        pl = next_points.length;
        if (n_current >= pl) {
            n_current = 0;
            next_points = new float[0];
            return;
        }
        if (n_current + 2 == pl) {
            x = next_points[n_current];
            y = next_points[n_current + 1];
        } else {
            x = next_points[n_current];
            y = next_points[n_current + 1];
            // XXX move based on time?
            // Find time elapsed.
            // speed = 30;
            // C = speed / frameRate
        }
        n_current += 2;
    }

    /**
     * @return The vertices of the pentagon in an array. i.e.
     *     [x1, y1, x2, y2, ..., x5, y5]
     */
    Array vertices() {
        return g_vertices(x, y, 5, side, rotation);
    }

    void draw_bezier() {
        // Set the control points
        control1_x = x + (next_x - x) / 2;
        control1_y = y + (next_y - y) / 2;
        control2_x = next_x - (control_x - next_x)
        control2_y = next_y - (control_y - next_y)
        stroke(0, 255, 0);
        noFill();
        bezier(x, y, control1_x, control1_y, control2_x, control2_y,
            next_x, next_y);
        // Draw the points.
        stroke(255, 0, 0);
        points = g_bezier_to_points(x, y, control1_x, control1_y,
            control2_x, control2_y, next_x, next_y, 40);
        for (int i = 0; i < points.length; i += 2) {
            point(points[i], points[i + 1]);
        }
    }

    void update() {
        // Set border and fill colors to white.
        if (pressed) {
            draw_bezier();
        }
        stroke(255);
        fill(255);
        vs = vertices();
        // Draw the pentagon in strips.
        triangle(vs[0], vs[1], vs[2], vs[3], vs[4], vs[5]);
        triangle(vs[0], vs[1], vs[4], vs[5], vs[8], vs[9]);
        triangle(vs[4], vs[5], vs[6], vs[7], vs[8], vs[9]);
        move();
    }
}

penta = new Penta(100, 100);
gol = new GameOfLife(300, 300, 10, 10);
void setup() {
    frameRate(60);
    size(800, 600);
    fill(255);
    PFont fontA = loadFont("Ubuntu");
    textFont(fontA, 14);
    loop();
    gol.add(1, 2);
    gol.add(2, 2);
    gol.add(3, 2);
//  gol.add(4, 2);
}

void draw() {
    background(125);
    text("Hello, World!", 20, 20);
    /*
    for (int i = 0; i < width; i++) {
        float r = random(255);
        float x = random(0, width);
        stroke(r, 100);
        line(i, 0, x, height);
    }
    */
    penta.update();
    stroke(255, 100);
    line(0, 0, width, height);
    stroke(0, 100);
    line(0, 0, 100, 100);
    /*
    noFill();
    stroke(255, 102, 0);
    line(30, 20, 80, 5);
    stroke(255, 102, 255);
    line(80, 75, 30, 75);
    stroke(0, 0, 0);
    bezier(30, 20,  80, 5,  80, 75,  30, 75);
     */
    gol.draw();
    text("fps: " + frameRate, 0, height);
}
