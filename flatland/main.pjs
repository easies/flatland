/* vim: set ft=processing :
 * Syntax file is at http://web.ift.uib.no/~szhorvat/processing.vim
 *                or http://www.vim.org/scripts/script.php?script_id=2115
 */


class Penta extends Polygon {
    PVector next;
    PVector control;
    PVector control1;
    PVector control2;
    boolean pressed;
    float[] next_points;
    int n_current;
    int last_time;

    Penta(float x, float y) {
        super(x, y, 0.0, 50);
        pressed = false;
        next_points = new float[0];
        n_current = 0;
        control = new PVector(0, 0);
        control1 = new PVector(0, 0);
        control2 = new PVector(0, 0);
        next = new PVector(0, 0);
        last_time = 1000 * second() + millis();
    }

    void set_points() {
        next_points = g_bezier_to_points(location.x, location.y,
            control1.x, control1.y, control2.x, control2.y,
            next.x, next.y, 100);
        n_current = 0;
    }

    void update() {
        current = 1000 * second() + millis();
        elapsed = (current - last_time) % 60000;
        last_time = current;
        pl = next_points.length;
        if (n_current >= pl) {
            n_current = 0;
            next_points = new float[0];
            return;
        }
        if (n_current + 2 == pl) {
            location.x = next_points[n_current];
            location.y = next_points[n_current + 1];
        } else {
            location.x = next_points[n_current];
            location.y = next_points[n_current + 1];
            // XXX move based on time?
            // Find time elapsed.
            // speed = 30;
            // C = speed / frameRate
        }
        n_current += 2;
    }

    void draw_bezier() {
        // Set the control points
        control1.x = location.x + (next.x - location.x) / 2;
        control1.y = location.y + (next.y - location.y) / 2;
        control2.x = next.x - (control.x - next.x);
        control2.y = next.y - (control.y - next.y);
        stroke(#00FF00);
        noFill();
        bezier(location.x, location.y, control1.x, control1.y,
            control2.x, control2.y, next.x, next.y);
        // Draw the points.
        draw_points();
    }

    void draw_points() {
        stroke(#FF0000);
        points = g_bezier_to_points(location.x, location.y,
            control1.x, control1.y, control2.x, control2.y,
            next.x, next.y, 40);
        for (int i = 0; i < points.length; i += 2) {
            point(points[i], points[i + 1]);
        }
    }

    void draw() {
        // Set border and fill colors to white.
        if (pressed) {
            draw_bezier();
        }
        draw_polygon(#FF00FF, #000000);
        update();
    }
}

penta = new Penta(102, 100);
world = new World();
void setup() {
    frameRate(60);
    size(800, 600);
    PFont fontA = loadFont("Ubuntu");
    textFont(fontA, 14);
    gol = new GameOfLife(300, 300, 10, 10, #000000);
    map = new Map("data/map1.png");
    // PShape sv = loadShape("x.svg");
    gol.add_all({
        1, 2,
        2, 2,
        3, 2
    });
    world.add(map);
    world.add(gol);
    // world.add(sv);
    world.add(penta);
    loop();
}

void draw() {
    background(0);
    world.draw();
    stroke(0);
    fill(0);
    // shape(sv, 0, 0, 400, 400);
    text("fps: " + frameRate, 0, height);
}
