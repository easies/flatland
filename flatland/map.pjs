/* vim: set ft=processing: */


public class Map implements Drawable {
    /** The position of the eye. This is the center of the screen. */
    float eye_x;
    float eye_y;
    PImage img;
    float scale;
    Object walls;
    Object next_level;

    /**
     * @param imagepath The path to the image.
     * @param walls The object carrying the collision functions.
     * @param next_level The next world.
     */
    Map(String imagepath, Object walls, next_level) {
        eye_x = min_x();
        eye_y = min_y();
        scale = 1.0;
        img = loadImage(imagepath);
        this.walls = walls;
        this.next_level = next_level;
    }

    boolean reached_end(vertices) {
        for (int i = 0, len = vertices.length; i < len; i += 2) {
            if (!walls.reached_end(int(vertices[i]), int(vertices[i + 1]))) {
                return false;
            }
        }
        return true;
    }

    boolean in_wall(int x, int y) {
        return walls.in_wall(x, y);
    }

    int get_width() {
        return img.width;
    }

    int get_height() {
        return img.height;
    }

    /* The bounds. Since `width` and `height` are changable, these are
     * in a closure. */
    float min_x() {
        return width / 2;
    }

    float min_y() {
        return height / 2;
    }

    float max_x() {
        return scale * img.width - min_x();
    }

    float max_y() {
        return scale * img.height - min_y();
    }

    PVector left_corner() {
        return new PVector(eye_x - min_x(), eye_y - min_y());
    }

    /**
     * @param The location in reference to the map's origin.
     * @returns The location in reference to the screen.
     */
    PVector screen_location(PVector location) {
        PVector screen_location = new PVector(location.x, location.y);
        screen_location.sub(this.left_corner());
        return screen_location;
    }

    /**
     * Moves the eye by the given deltas. If the resulting position is
     * outside of the bound, the position is corrected.
     * @param dx The x delta.
     * @param dy The y delta.
     */
    void move_eye(float dx, float dy) {
        eye_x += dx;
        eye_y += dy;
        if (eye_x < min_x()) {
            eye_x = min_x();
        } else if (eye_x > max_x()) {
            eye_x = max_x();
        }
        if (eye_y < min_y()) {
            eye_y = min_y();
        } else if (eye_y > max_y()) {
            eye_y = max_y();
        }
    }

    void draw() {
        image(img, min_x() - eye_x, min_y() - eye_y,
            scale * img.width, scale * img.height);
    }
}
