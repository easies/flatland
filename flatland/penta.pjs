/* vim: set ft=processing : */

/**
 * The pentagon, our main character.
 */
class Penta extends PolygonInMap implements Drawable {
    /** vectors for bezier */
    PVector next;
    PVector control;
    PVector control1;
    PVector control2;
    /** flag when the mouse is pressed. */
    boolean pressed;
    PVector next_points;
    int n_current;
    int last_time;
    float star_animation = 0.0;
    int rotating = 0;
    float angle_v = 0.0;

    Penta(Map map, float x, float y) {
        super(map, x, y, 0.0, 50);
        pressed = false;
        n_current = 0;
        control = new PVector(0, 0);
        control1 = new PVector(0, 0);
        control2 = new PVector(0, 0);
        next = new PVector(0, 0);
        next_points = new PVector[0];
        last_time = 1000 * second() + millis();
    }

    boolean collided() {
        vs = l_vertices();
        return (
            map.in_wall(int(vs[0]), int(vs[1])) ||
            map.in_wall(int(vs[2]), int(vs[3])) ||
            map.in_wall(int(vs[4]), int(vs[5])) ||
            map.in_wall(int(vs[6]), int(vs[7])) ||
            map.in_wall(int(vs[8]), int(vs[9])));
    }

    void reached_end() {
        if (map.reached_end(l_vertices())) {
            if (map.next_level != null) {
                map.next_level();
            }
        }
    }

    void rotate_by(float angle) {
        super.rotate_by(angle);
        if (collided()) {
            rotation -= angle;
        }
    }

    void rotate_cw() {
        if (rotating != 1) {
            rotating = 1;
            angle_v = 0.1;
        } else if (angle_v < 0.4) {
            angle_v += 0.05;
        }
    }

    void rotate_ccw() {
        if (rotating != -1) {
            rotating = -1;
            angle_v = -0.1;
        } else if (angle_v > -0.4) {
            angle_v -= 0.05;
        }
    }

    void rotate_stop() {
        this.rotating = 0;
        this.angle_v = 0;
    }

    /**
     * Set the next movement.
     */
    void set_points() {
        next_points = g_bezier_to_vectors(screen_location(), control1,
            control2, next, 100);
        n_current = 0;
    }

    /**
     * Cancel the movement.
     */
    void _reset() {
        n_current = 0;
        next_points = new PVector[0];
    }

    void set_collision_reaction() {
        save = next_points.slice(n_current - 1);
        for (int i = 0, len = save.length; i < len; i++) {
            v = save[i];
            v_opposite = new PVector(-v.x, -v.y);
            v_opposite.div(2);
            save[i] = v_opposite;
        }
        next_points = save;
        n_current = 0;
    }

    /**
     * Update the state of the pentagon.
     */
    void update() {
        // current = 1000 * second() + millis();
        // elapsed = (current - last_time) % 60000;
        // last_time = current;
        rotate_by(angle_v);
        if (n_current >= next_points.length) {
            _reset();
            return;
        }
        v = next_points[n_current];
        n_current += 1;
        // Set the "eye" of the map to the pentagon.
        map.eye_x = location.x;
        map.eye_y = location.y;
        // Do bounds checking.
        map.move_eye(0, 0);
        // Move the actual pentagon.
        move_by(v.x, v.y);
        // Check if we reached the end of the level.
        reached_end();
        // Check if we have collided with a wall.
        if (collided()) {
            move_by(-v.x, -v.y);
            set_collision_reaction();
            return;
        }
    }

    void draw_bezier() {
        // Set the control points
        loc = screen_location();
        control1.x = loc.x + (next.x - loc.x) / 2;
        control1.y = loc.y + (next.y - loc.y) / 2;
        control2.x = next.x - (control.x - next.x);
        control2.y = next.y - (control.y - next.y);
        stroke(#00FF00);
        noFill();
        bezier(loc.x, loc.y, control1.x, control1.y,
            control2.x, control2.y, next.x, next.y);
    }

    void draw_points() {
        stroke(#FF0000);
        loc = screen_location();
        points = g_bezier_to_points(loc.x, loc.y,
            control1.x, control1.y, control2.x, control2.y,
            next.x, next.y, 40);
        for (int i = 0; i < points.length; i += 2) {
            point(points[i], points[i + 1]);
        }
    }

    Array star_vertices() {
        vs = vertices();
        midpoints = new float[vs.length];
        for (int i = 0, len = vs.length; i < len; i++) {
            midpoints[i] = vs[i] + (vs[(i+12) % len] - vs[i]) / 2;
        }
        // Reorder the vertices.
        result = new float[vs.length + midpoints.length];
        int j = 0;
        int k = 0;
        for (int i = 0, len = result.length; i < len; i += 2) {
            if (j <= k) {
                result[i] = vs[j];
                result[i + 1] = vs[j + 1];
                j += 2;
            } else {
                result[i] = midpoints[k];
                result[i + 1] = midpoints[k + 1];
                k += 2;
            }
        }
        return result;
    }

    void draw_star() {
        vs = star_vertices();
        loc = screen_location();
        pushMatrix();
        translate(loc.x, loc.y);
        rotate(rotation);
        fill(#00FFCC);
        stroke(#00FFCC);
        beginShape();
        // The parametric
        t = (0.7 - abs(angle_v));
        for (int i = 0, len = vs.length; i < len; i += 2) {
            if ((i / 2) % 2 == 0) {
                vertex_x = vs[i];
                vertex_y = vs[i + 1];
            } else {
                vertex_x = vs[i] * t;
                vertex_y = vs[i + 1] * t;
            }
            vertex(vertex_x, vertex_y);
            if (debug) {
                rect(vertex_x - 2, vertex_y -2, 4, 4);
            }
        }
        endShape(CLOSE);
        fill(#FFCC00);
        stroke(#FFCC00);
        if (debug) {
            for (int i = 0, len = vs.length; i < len; i += 2) {
            }
        }
        popMatrix();
    }

    void draw() {
        if (pressed) {
            // Draw the curve.
            draw_bezier();
            // Draw the points.
            draw_points();
        }
        if (rotating == 0) {
            draw_polygon(#FF00FF, #000000);
        } else {
            draw_star();
        }
        update();
    }
}
