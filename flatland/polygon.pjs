/* vim: set ft=processing :
 */


class Polygon {
    PVector location;
    float rotation;
    int n_sides;
    int side_length;

    Polygon(float x, float y, int side) {
        this(x, y, 0.0, side);
    }

    Polygon(float x, float y, float rotation, int side) {
        location = new PVector(x, y);
        this.rotation = rotation;
        this.side_length = side;
        n_sides = 5;
    }

    void move_by(float dx, float dy) {
        location.x += dx;
        location.y += dy;
    }

    void rotate_by(float angle) {
        rotation += angle;
    }

    Array vertices() {
        // The angle between sides.
        angle1 = PI * (n_sides - 2) / n_sides;
        // Law of sines.
        // The distance from the center to a vertex.
        center_to_vertex = sin(angle1 / 2) / sin(PI - angle1) * side_length;
        // Half of the inner angle
        C = PI / n_sides;
        points = new float[n_sides * 2];
        for (int i = 0, len = n_sides * 2; i < len; i += 2) {
            points[i] = center_to_vertex * cos(i * C);
            points[i + 1] = center_to_vertex * sin(i * C);
        }
        return points;
    }

    static void _draw_polygon(PVector location, float rotation, Array vertices,
        color stroke_color, color fill_color) {
        pushMatrix();
        stroke(stroke_color);
        fill(fill_color);
        translate(location.x, location.y);
        rotate(rotation);
        beginShape();
        for (int i = 0, len = vertices.length; i < len; i += 2) {
            vertex(vertices[i], vertices[i + 1]);
        }
        endShape(CLOSE);
        popMatrix();
    }

    void draw_polygon(color stroke_c, color fill_c) {
        _draw_polygon(location, rotation, vertices(), stroke_c, fill_c);
    }
}


class PolygonInMap extends Polygon {
    Map map;

    PolygonInMap(Map map, float x, float y, float rotation, int side) {
        super(x, y, rotation, side);
        this.map = map;
    }

    PVector screen_location() {
        PVector screen_location = new PVector(location.x, location.y);
        screen_location.sub(map.left_corner());
        return screen_location;
    }

    void draw_polygon(color stroke_c, color fill_c) {
        vs = vertices();
        _draw_polygon(screen_location(), rotation, vs, stroke_c, fill_c);
    }
}
