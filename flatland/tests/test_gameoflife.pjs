/* vim: set ft=processing : */

boolean array_contains(arr, value) {
    int i = arr.length;
    while (i--) {
        if (arr[i] == value) {
            return true;
        }
    }
    return false;
}

String test_gameoflife_neighbors() {
    GameOfLife g = new GameOfLife(0, 0, 10, 10, #000000);
    // (0,0) (1,0) (2,0) (3,0) ...
    // (0,1) (1,1) (2,1) (3,1) ...
    // (0,2) (1,2) (2,2) (3,2) ...
    // (0,3) (1,3) (2,3) (3,3) ...
    //     equiv
    // 0     1     2     3     ...
    // 10    11    12    13    ...
    // 20    21    22    23    ...
    // 30    31    32    33    ...
    g.add(1, 1);
    int[] nb;
    nb = g._neighbors(1, 1);
    assert(nb.length == 8, "Neighbor length");
    assert(array_contains(nb, 0), "nb contains 0");
    assert(array_contains(nb, 1), "nb contains 1");
    assert(array_contains(nb, 2), "nb contains 2");
    assert(array_contains(nb, 10), "nb contains 10");
    assert(array_contains(nb, 12), "nb contains 12");
    assert(array_contains(nb, 20), "nb contains 20");
    assert(array_contains(nb, 21), "nb contains 21");
    assert(array_contains(nb, 22), "nb contains 22");
    // corners.
    nb = g._neighbors(0, 0);
    assert(nb.length == 3, "neighbor length");
    assert(array_contains(nb, 1), "nb contains 1");
    assert(array_contains(nb, 10), "nb contains 10");
    assert(array_contains(nb, 11), "nb contains 11");
    //
    nb = g._neighbors(0, 9);
    assert(nb.length == 3, "neighbor length");
    assert(array_contains(nb, 80), "nb contains 80");
    assert(array_contains(nb, 81), "nb contains 81");
    assert(array_contains(nb, 91), "nb contains 91");
    //
    nb = g._neighbors(9, 9);
    assert(nb.length == 3, "neighbor length");
    assert(array_contains(nb, 89), "nb contains 89");
    assert(array_contains(nb, 88), "nb contains 88");
    assert(array_contains(nb, 98), "nb contains 98");
    //
    nb = g._neighbors(9, 0);
    assert(nb.length == 3, "neighbor length");
    assert(array_contains(nb, 8), "nb contains 8");
    assert(array_contains(nb, 18), "nb contains 18");
    assert(array_contains(nb, 19), "nb contains 19");
    return null;
}
