/* vim: set ft=processing : */

public interface Drawable {
    /**
     * Draw this.
     */
    void draw();
}

public interface IWorld {
    /* Event handlers.
     * These are hooked to the global event handlers in events.pjs
     */
    void mouseClicked() {}
    void mouseDragged() {}
    void mouseMoved() {}
    void mousePressed() {}
    void mouseReleased() {}
    void keyPressed() {}
    void keyReleased() {}
    void keyTyped() {}
}

/**
 * The world. Contains Drawable things.
 */
public class World implements Drawable, IWorld {
    ArrayList things;

    World() {
        things = new ArrayList();
    }

    void add(thing) {
        things.add(thing);
    }

    void replace(new_world) {
        things = new_world.things;
    }

    void draw() {
        for (int i = 0, len = things.size(); i < len; i++) {
            things.get(i).draw();
        }
    }

    void mouseClicked() {}
    void mouseDragged() {}
    void mouseMoved() {}
    void mousePressed() {}
    void mouseReleased() {}
    void keyPressed() {}
    void keyReleased() {}
    void keyTyped() {}
}

public class PentaWorld extends World {
    void mouseDragged() {
        penta.control = new PVector(mouseX, mouseY);
    }

    void mouseMoved() {
        penta.pressed = false;
        penta.control = new PVector(mouseX, mouseY);
    }

    void mousePressed() {
        if (penta.pressed) {
            // Mouse moved out of the canvas, so on a press, we "release".
            this.mouseReleased();
        } else {
            penta.pressed = true;
            penta.next = new PVector(mouseX, mouseY);
        }
    }

    void mouseReleased() {
        penta.pressed = false;
        penta.control = new PVector(mouseX, mouseY);
        penta.set_points();
    }

    void keyTyped() {
        switch (char(key)) {
        case 'R':
        case 'r':
            penta.toggle_rotate_cw();
            break;
        case 'E':
        case 'e':
            penta.toggle_rotate_ccw();
            break;
        default:
            break;
        }
    }
}
